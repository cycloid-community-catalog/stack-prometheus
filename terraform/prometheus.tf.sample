
# This variable can be uncomment to be able to give the password from the pipeline
#variable "rds_password" {
#    default = "ChangeMePls"
#}

module "prometheus" {
  #####################################
  # Do not modify the following lines #
  source      = "module-prometheus"
  project     = "${var.project}"
  env         = "${var.env}"
  customer    = "${var.customer}"
  aws_region  = "${var.aws_region}"
  #####################################

  #. vpc_id (required):
  #+ Amazon VPC id on which create each components.
  vpc_id = "<vpc-id>"

  #. keypair_name (optional): cycloid
  #+ SSH keypair name to use to deploy ec2 instances.
  keypair_name = "my-key-pair"

  #. bastion_sg_allow (optional):
  #+ Amazon source security group ID which will be allowed to connect on Fronts port 22 (ssh).
  bastion_sg_allow = "<bastion-sg>"

  #. public_subnets_ids (required, array):
  #+ Amazon subnets IDs on which create each components.
  public_subnets_ids = ["public-subnets"]

  #. private_subnets_ids (optional, array): []
  #+ Amazon subnets IDs on which create each components. Used when create_rds_database is true.

  #. create_rds_database (optional, bool): false
  #+ create a rds database generaly used for grafana. **false** will not create the database

  #. rds_password (optional): ChangeMePls
  #+ RDS password. expected value is "${var.rds_password}" to get it from the pipeline.

  #. prometheus_type (optional): t2.micro
  #+ Amazon EC2 instance type for Prometheus server.

  #. prometheus_disk_size (optional): 60
  #+ Disk size for the Prometheus server.

  #. enable_https (optional, bool): false
  #+ Open or not the HTTPS port on the EC2 instance.

  #. rds_database (optional): grafana
  #+ RDS database name

  #. rds_disk_size (optional): 10
  #+ RDS database disk size

  #. rds_type (optional): db.t2.small
  #+ RDS database instance size

  #. rds_username (optional): grafana
  #+ RDS database username

}

# Example of security group to allow prometheus server to reach your infra and prod vpc

#resource "aws_security_group" "infra_allow_metrics" {
#  name        = "infra_allow_metrics"
#  description = "Allow metrics server to collect metrics"
#  vpc_id      = "${data.terraform_remote_state.infrastructure.infra_vpc_id}"
#
#  ingress = {
#    from_port       = 9100
#    to_port         = 9100
#    protocol        = "tcp"
#    security_groups = ["${module.prometheus.prometheus_secgroup_id}"]
#    self            = false
#  }
#
#  egress {
#    from_port   = 0
#    to_port     = 0
#    protocol    = "-1"
#    cidr_blocks = ["0.0.0.0/0"]
#  }
#
#  tags {
#    Name    = "allow-metrics"
#    project = "infra"
#  }
#}
#
#output "infra_metrics_sg_allow" {
#  value = "${aws_security_group.infra_allow_metrics.id}"
#}

#resource "aws_security_group" "prod_allow_metrics" {
#  name        = "prod_allow_metrics"
#  description = "Allow metrics server to collect metrics"
#  vpc_id      = "${data.terraform_remote_state.infrastructure.prod_vpc_id}"
#
#  ingress = {
#    from_port       = 9100
#    to_port         = 9100
#    protocol        = "tcp"
#    security_groups = ["${module.prometheus.prometheus_secgroup_id}"]
#    self            = false
#  }
#
#  egress {
#    from_port   = 0
#    to_port     = 0
#    protocol    = "-1"
#    cidr_blocks = ["0.0.0.0/0"]
#  }
#
#  tags {
#    Name    = "allow-metrics"
#    project = "infra"
#  }
#}
#
#output "prod_metrics_sg_allow" {
#  value = "${aws_security_group.prod_allow_metrics.id}"
#}
