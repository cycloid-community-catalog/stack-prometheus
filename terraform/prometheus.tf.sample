
# This variable can be uncomment to be able to give the password from the pipeline
#variable "rds_password" {
#    default = "ChangeMePls"
#}

# This output can be use by the pipeline to generate a variable used in ansible (extract-terraform-outputs)
#output "rds_password" {
#  value = "${var.rds_password}"
#}

module "prometheus" {
  #####################################
  # Do not modify the following lines #
  source      = "module-prometheus"
  project     = "${var.project}"
  env         = "${var.env}"
  customer    = "${var.customer}"
  aws_region  = "${var.aws_region}"
  #####################################


  keypair_name             = "<key-pair>"
  vpc_id                   = "<vpc-id>"
  bastion_sg_allow         = "<bastion-sg>"

  # public_subnets_ids       = ["<public-subnets>"]
  # private_subnets_ids      = ["private-subnets"]


  # If you need to create a rds (for example used for grafana)
  # create_rds_database  = "true"
  # rds_password         = "${var.rds_password}"
  # rds_database         = "grafana"
  # rds_disk_size        = 10
  # rds_multiaz          = false
  # rds_storage_type     = "gp2"
  # rds_type             = "db.t2.small"
  # rds_username         = "grafana"
  # rds_engine           = "mysql"
  # rds_engine_version   = "5.7.16"
  # rds_backup_retention = 7
  # rds_parameters       = ""

}

# Example of security group to allow prometheus server to reach your infra and prod vpc

#resource "aws_security_group" "infra_allow_metrics" {
#  name        = "infra_allow_metrics"
#  description = "Allow metrics server to collect metrics"
#  vpc_id      = "${data.terraform_remote_state.infrastructure.infra_vpc_id}"
#
#  ingress = {
#    from_port       = 9100
#    to_port         = 9100
#    protocol        = "tcp"
#    security_groups = ["${module.prometheus.prometheus_secgroup_id}"]
#    self            = false
#  }
#
#  egress {
#    from_port   = 0
#    to_port     = 0
#    protocol    = "-1"
#    cidr_blocks = ["0.0.0.0/0"]
#  }
#
#  tags {
#    Name    = "allow-metrics"
#    project = "infra"
#  }
#}
#
#output "infra_metrics_sg_allow" {
#  value = "${aws_security_group.infra_allow_metrics.id}"
#}

#resource "aws_security_group" "prod_allow_metrics" {
#  name        = "prod_allow_metrics"
#  description = "Allow metrics server to collect metrics"
#  vpc_id      = "${data.terraform_remote_state.infrastructure.prod_vpc_id}"
#
#  ingress = {
#    from_port       = 9100
#    to_port         = 9100
#    protocol        = "tcp"
#    security_groups = ["${module.prometheus.prometheus_secgroup_id}"]
#    self            = false
#  }
#
#  egress {
#    from_port   = 0
#    to_port     = 0
#    protocol    = "-1"
#    cidr_blocks = ["0.0.0.0/0"]
#  }
#
#  tags {
#    Name    = "allow-metrics"
#    project = "infra"
#  }
#}
#
#output "prod_metrics_sg_allow" {
#  value = "${aws_security_group.prod_allow_metrics.id}"
#}
